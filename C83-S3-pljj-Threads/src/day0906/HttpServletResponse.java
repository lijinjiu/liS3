package day0906;

import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
//Entry是Map的静态内部接口
import java.util.Map.Entry;

public class HttpServletResponse {
	//通过socket获取的输出流
	private OutputStream out;
	private int status;
	private String msg;
	//存放头域键值对的map集合
    private Map<String, String> headerMap=new HashMap<>();
    //保存Cookie发送给浏览器的Cookie
    private List<Cookie> cookieList=new ArrayList<>();
    
	public HttpServletResponse(OutputStream out) {
		this.out=out;
	}
	//字符串的输出流 将输出内容保存到一个字符串中  资源流
	private CharArrayWriter caw=new CharArrayWriter();
	//处理流  
	private PrintWriter pw=new PrintWriter(caw);
	//获取响应输出流（打印流）  临时保存Servlet输出的内容
	public PrintWriter getWriter() {
		return pw;
	}
	//设置响应结果码和结果码消息
	public void setStatus(int status,String msg) {
		//如果已经设置结果码 那么就不再设置
		if(this.status==0) {
			this.status=status;
			this.msg=msg;	
		}
	}
	//将响应报文推送给浏览器
	public void flushBuffer() throws IOException {
		out.write(("HTTP/1.1 "+status+" "+msg+"\n").getBytes());
		//响应头域
		out.write(("contentType: text/html; charset=utf-8\n").getBytes());
		//map集合的循环 将头域集合中的值写入响应报文
		for(Entry<String,String>entry:headerMap.entrySet()) {
			out.write((entry.getKey()+":"+entry.getValue()+"\n").getBytes());
		}
		//迭代器循环
		for (Iterator<Cookie> iterator = cookieList.iterator(); iterator.hasNext();) {
			Cookie cookie = iterator.next();
			out.write(cookie.toString().getBytes());
		}
		//空行CRLF
		out.write("\n".getBytes());
		out.write(caw.toString().getBytes());
	}
	//响应重定向方法 uri 要跳转的页面
	public void sendRedirect(String uri) {
		//写结果码301 or 302
		setStatus(301, "Redirect");
		//在头域中写入(增加)Location：要跳转的页面
		headerMap.put("Location",uri);
		
	}
	public void addCookie(Cookie cookie) {
		cookieList.add(cookie);
	}	
}
